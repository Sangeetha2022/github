import { Component, OnInit } from '@angular/core';
{{#each GpHeaders}}
import { {{importName}} } from '{{ importPath }}';
{{/each}}
{{#each GpHeadersStarAs}}
import * as {{importName}} from '{{ importPath }}';
{{/each}}


@Component({
  selector: 'app-{{ GpOptions.screenName }}',
  templateUrl: './{{ GpOptions.screenName }}.component.html',
  styleUrls: ['./{{ GpOptions.screenName }}.component.scss'],
})

export class {{ GpOptions.className }} implements OnInit {
{{#each GpOptions.variables}}
    {{name}}: {{dataType}}{{#ifCond value '!=' null}} = {{ value }}{{/ifCond}};
{{/each}}
{{#each GpOptions.arrayVariables}}
    {{name}}: {{dataType}} = [{{#each value}}{ {{key1}}: '{{value1}}', {{key2}}: '{{value2}}'  },{{/each}}];
{{/each}}
{{#each GpOptions.entities}}
    public {{ name }} = {
        created_date: '',
        created_by: '',
        last_modified_by: '',
        last_modified_date: '',
    {{#each field}}
        {{ name }}: '',
    {{/each}}
    }
{{/each}}
{{#if GpOptions.is_grid_present}}
    {{{ GpOptions.grid_components }}}
{{/if}}

{{#ifCond GpOptions.featureName '===' 'systementry'}}
    public url: any = '';
    public firstName = '';
    public lastName = '';
    public Id;
    public changeName;
    public open;
    public close;
{{/ifCond}}

    constructor (
        {{#each GpOptions.constructor}}
        private {{ objectName }}: {{ className }},
        {{/each}}
    ) { }

    ngOnInit() {
        {{#if GpOptions.entities}}
        {{#each GpOptions.entities}}
        this.{{ name }}.created_by = sessionStorage.getItem('email'); 
        {{/each}}
        {{/if}}
        {{#ifCond GpOptions.featureName '===' 'systementry'}}
            this.Id = sessionStorage.getItem('Id');
            {{#each GpCodeToAdd.flows_info }}

                    this.{{ ../GpOptions.screenName }}Service.{{ flowName }}(this.Id).subscribe(logindetails => {
                        {{{ body }}}
                    },
                    error => {
                        console.log('Error', error);
                    });

            {{/each}}
        {{/ifCond}}
        {{#each GpCodeToAdd.flows_info }}
        {{#ifCond lifeCycleData '===' 'OnLoad'}}
        this.{{flowName}}();
        {{/ifCond}}
        {{/each}}
    {{#each GpCodeToAdd.lifecycle_info }}
        {{#if queryParams}}
            {{{ queryParamSubscribe }}}
        {{/if}}
        {{#if getAll}}
        this.GpGetAllValues();
        {{/if}}
    {{/each}}
    }
    {{#ifCond GpOptions.featureName '!==' 'systementry'}}
        {{#each GpCodeToAdd.flows_info }}
            {{ flowName }}() {
                this.{{ ../GpOptions.screenName }}Service.{{ flowName }}({{ parameterName }}).subscribe(data => {
                    {{{ body }}}
                },
                error => {
                    console.log('Error', error);
                });
            }
        {{/each}}
    {{/ifCond}}
    onSelectFile(event) {
    if (event.target.files && event.target.files[0]) {
      const reader = new FileReader();

      reader.readAsDataURL(event.target.files[0]);
      // tslint:disable-next-line:no-shadowed-variable
      reader.onload = (event) => {
        this.url = (event.target as FileReader).result;
      };
    }
  }
  public delete() {
    this.url = null;
  }
{{#each GpCodeToAdd.route_info }}
    {{ flowName }}({{ parameterName }}) {
        {{{ body }}}
    }
{{/each}}
}