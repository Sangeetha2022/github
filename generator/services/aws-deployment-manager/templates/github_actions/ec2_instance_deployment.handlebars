name: aws_ec2_deployments_for_{{project_name}}
on:
  push:
    branches: 
      - master
  pull_request:
    branches: 
      - master
env:
  AWS_ACCOUNT_ID: ${{#surroundWithCurlyBraces 'secrets.AWS_ACCOUNT_ID' }}{{/surroundWithCurlyBraces}}
  AWS_ROLE_FOR_FARGATE: ${{#surroundWithCurlyBraces ' secrets.AWS_ROLE_FOR_FARGATE '}}{{/surroundWithCurlyBraces}}
  AWS_ACCESS_KEY_ID: ${{#surroundWithCurlyBraces ' secrets.AWS_ACCESS_KEY_ID '}}{{/surroundWithCurlyBraces}}
  AWS_SECRET_ACCESS_KEY: ${{#surroundWithCurlyBraces ' secrets.AWS_SECRET_ACCESS_KEY '}}{{/surroundWithCurlyBraces}}
  AWS_REGION: ${{#surroundWithCurlyBraces ' secrets.AWS_REGION '}}{{/surroundWithCurlyBraces}}
  AWS_VPC_SUBNET: ${{#surroundWithCurlyBraces ' secrets.AWS_VPC_SUBNET '}}{{/surroundWithCurlyBraces}}
  AWS_VPC_SECURITY_GROUP: ${{#surroundWithCurlyBraces ' secrets.AWS_VPC_SECURITY_GROUP '}}{{/surroundWithCurlyBraces}}
  AWS_ECS_CLUSTER_NAME: ${{#surroundWithCurlyBraces ' secrets.AWS_ECS_CLUSTER_NAME '}}{{/surroundWithCurlyBraces}}
  PROJECT_NAME: {{s3_bucket_name}}
  AWS_S3_BUCKET_NAME: {{s3_bucket_name}}.geppetto.link

jobs:
  Prerequisites:
    runs-on: ubuntu-latest
    steps:
      - name: Configure the aws cli
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{#surroundWithCurlyBraces ' env.AWS_ACCESS_KEY_ID '}}{{/surroundWithCurlyBraces}}
          aws-secret-access-key: ${{#surroundWithCurlyBraces ' env.AWS_SECRET_ACCESS_KEY '}}{{/surroundWithCurlyBraces}}
          aws-region: ${{#surroundWithCurlyBraces ' env.AWS_REGION '}}{{/surroundWithCurlyBraces}}
      - name: Creating the S3 bucket
        run: aws s3api create-bucket --bucket ${{#surroundWithCurlyBraces 'env.AWS_S3_BUCKET_NAME'}}{{/surroundWithCurlyBraces}} --region us-east-1
      - name: Creating the aws ECR for each micro service
        run: |
          aws ecr create-repository --repository-name geppetto-generatedcode-{{project_name}}-{{project_unique_id}}-apigateway  --image-scanning-configuration scanOnPush=true  --region us-east-1
          aws ecr create-repository --repository-name geppetto-generatedcode-{{project_name}}-{{project_unique_id}}-authproxy  --image-scanning-configuration scanOnPush=true  --region us-east-1
          aws ecr create-repository --repository-name geppetto-generatedcode-{{project_name}}-{{project_unique_id}}-camunda  --image-scanning-configuration scanOnPush=true  --region us-east-1
          aws ecr create-repository --repository-name geppetto-generatedcode-{{project_name}}-{{project_unique_id}}-securitymanager  --image-scanning-configuration scanOnPush=true  --region us-east-1
          {{#each custom_features}}
          aws ecr create-repository --repository-name geppetto-generatedcode-{{../project_name}}-{{../project_unique_id}}-{{this.name}}  --image-scanning-configuration scanOnPush=true  --region us-east-1
          {{/each}}
  Build_and_upload_docker_images_to_ECR:
    needs: Prerequisites
    runs-on: ubuntu-latest
    steps:
      - name: Configure the aws cli
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{#surroundWithCurlyBraces ' env.AWS_ACCESS_KEY_ID '}}{{/surroundWithCurlyBraces}}
          aws-secret-access-key: ${{#surroundWithCurlyBraces ' env.AWS_SECRET_ACCESS_KEY '}}{{/surroundWithCurlyBraces}}
          aws-region: ${{#surroundWithCurlyBraces ' env.AWS_REGION '}}{{/surroundWithCurlyBraces}}
      - name: Checkout_Repo
        uses: actions/checkout@v2
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{#surroundWithCurlyBraces ' steps.login-ecr.outputs.registry '}}{{/surroundWithCurlyBraces}}
          IMAGE_TAG: 1
        run: |
     
          cd application/services/default_services/authproxy
          docker build -t $ECR_REGISTRY/geppetto-generatedcode-{{project_name}}-{{project_unique_id}}-authproxy:$IMAGE_TAG .
          docker push $ECR_REGISTRY/geppetto-generatedcode-{{project_name}}-{{project_unique_id}}-authproxy:$IMAGE_TAG
          echo "Successfully build the docker image for authproxy  and pushed to aws ecr"

          cd ../camunda
          docker build -t $ECR_REGISTRY/geppetto-generatedcode-{{project_name}}-{{project_unique_id}}-camunda:$IMAGE_TAG .
          docker push $ECR_REGISTRY/geppetto-generatedcode-{{project_name}}-{{project_unique_id}}-camunda:$IMAGE_TAG
          echo "Successfully build the docker image for camunda  and pushed to aws ecr"

          cd ../securitymanager
          docker build -t $ECR_REGISTRY/geppetto-generatedcode-{{project_name}}-{{project_unique_id}}-securitymanager:$IMAGE_TAG .
          docker push $ECR_REGISTRY/geppetto-generatedcode-{{project_name}}-{{project_unique_id}}-securitymanager:$IMAGE_TAG
          echo "Successfully build the  docker image for securitymanager and pushed to aws ecr"

          cd ../../custom_services/apigateway
          docker build -t $ECR_REGISTRY/geppetto-generatedcode-{{project_name}}-{{project_unique_id}}-apigateway:$IMAGE_TAG .
          docker push $ECR_REGISTRY/geppetto-generatedcode-{{project_name}}-{{project_unique_id}}-apigateway:$IMAGE_TAG
          echo "Successfully build the docker image for apigateway and pushed to aws ecr"

          {{#each custom_features}}
          cd ../{{this.name}}
          docker build -t $ECR_REGISTRY/geppetto-generatedcode-{{../project_name}}-{{../project_unique_id}}-{{this.name}}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/geppetto-generatedcode-{{../project_name}}-{{../project_unique_id}}-{{this.name}}:$IMAGE_TAG
          echo "Successfully build the docker image for {{this.name}} and pushed to aws ecr"
          {{/each}}
     
  Deploy_backend:
    needs: Build_and_upload_docker_images_to_ECR
    runs-on: ubuntu-latest
    outputs:
        public_ip: ${{#surroundWithCurlyBraces ' steps.publicIpAddress.outputs.PUBLIC_IP_ADDRESS '}}{{/surroundWithCurlyBraces}}
    steps:
      - name: Check the  branch
        uses: actions/checkout@v2
      - name: Installing the Node
        uses: actions/setup-node@v1
        with:
          node-version: 10
      - name: EFS volume attach task definition
        id: EfsID
        run: echo "::set-output name=FILESYSTEM_ID::$(aws efs create-file-system --performance-mode generalPurpose --throughput-mode bursting --encrypted --tags Key=Name,Value={{s3_bucket_name}} | jq '.FileSystemId')"
      - name: EFS SecurityGroups Added
        run: |
          sleep 10s
          aws efs create-mount-target --file-system-id ${{#surroundWithCurlyBraces 'steps.EfsID.outputs.FILESYSTEM_ID'}}{{/surroundWithCurlyBraces}} --subnet-id ${{#surroundWithCurlyBraces 'env.AWS_VPC_SUBNET'}}{{/surroundWithCurlyBraces}} --security-group ${{#surroundWithCurlyBraces 'env.AWS_VPC_SECURITY_GROUP'}}{{/surroundWithCurlyBraces}}
      - name: Convert the task_defination.ts to json
        working-directory: .github/workflows
        run: |
          AWS_ACCOUNT_ID="${{#surroundWithCurlyBraces 'env.AWS_ACCOUNT_ID'}}{{/surroundWithCurlyBraces}}" AWS_ROLE_FOR_FARGATE="${{#surroundWithCurlyBraces 'env.AWS_ROLE_FOR_FARGATE'}}{{/surroundWithCurlyBraces}}" EFS_ID=${{surroundWithCurlyBraces 'steps.EfsID.outputs.FILESYSTEM_ID'}}{{/surroundWithCurlyBraces}} node task-definition.ts >> task-definition.json
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{#surroundWithCurlyBraces ' env.AWS_ACCESS_KEY_ID '}}{{/surroundWithCurlyBraces}}
          aws-secret-access-key: ${{#surroundWithCurlyBraces ' env.AWS_SECRET_ACCESS_KEY '}}{{/surroundWithCurlyBraces}}
          aws-region: ${{#surroundWithCurlyBraces ' env.AWS_REGION '}}{{/surroundWithCurlyBraces}}
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .github/workflows/task-definition.json
          container-name: mongo-{{project_unique_id}}
          image: geppettotest/mongo-local:april2020
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{#surroundWithCurlyBraces 'steps.task-def.outputs.task-definition' }}{{/surroundWithCurlyBraces}}
          cluster: ${{#surroundWithCurlyBraces ' env.AWS_ECS_CLUSTER_NAME '}}{{/surroundWithCurlyBraces}}
          wait-for-service-stability: true
      - name: Run the ECS task definition
        id: networkInterfaceId
        run: |
          echo "::set-output name=run_task::$(aws ecs run-task --capacity-provider-strategy capacityProvider=FARGATE_SPOT --cluster ${{#surroundWithCurlyBraces ' env.AWS_ECS_CLUSTER_NAME '}}{{/surroundWithCurlyBraces}}  --task-definition {{project_name}}  --network-configuration "awsvpcConfiguration={subnets=[${{#surroundWithCurlyBraces ' env.AWS_VPC_SUBNET '}}{{/surroundWithCurlyBraces}}],securityGroups=[${{#surroundWithCurlyBraces ' env.AWS_VPC_SECURITY_GROUP '}}{{/surroundWithCurlyBraces}}],assignPublicIp=ENABLED}" | jq  -r '.tasks[].taskArn')"
          sleep 20s
      - uses: jungwinter/split@v1
        id: split
        with:
          msg: ${{#surroundWithCurlyBraces 'steps.networkInterfaceId.outputs.run_task' }}{{/surroundWithCurlyBraces}}
          seperator: '/'
          max limit: -1
      - name: network describe ENI IDS
        id: eniIds
        run : |
          echo "::set-output name=NETWORK_ID::$(aws ecs describe-tasks --cluster ${{#surroundWithCurlyBraces ' env.AWS_ECS_CLUSTER_NAME '}}{{/surroundWithCurlyBraces}} --tasks ${{#surroundWithCurlyBraces 'steps.split.outputs._2' }}{{/surroundWithCurlyBraces}} | jq '.tasks[].attachments[].details[1].value')"
      - name: network describe pulblicIp
        id: publicIpAddress
        run : |
          echo "::set-output name=PUBLIC_IP_ADDRESS::$(aws ec2 describe-network-interfaces --network-interface-ids ${{#surroundWithCurlyBraces ' steps.eniIds.outputs.NETWORK_ID '}}{{/surroundWithCurlyBraces}}  | jq -r '.NetworkInterfaces[].PrivateIpAddresses[].Association.PublicIp')"
      - name: describe value on check variable
        run : |
          echo ${{#surroundWithCurlyBraces 'steps.split.outputs._2' }}{{/surroundWithCurlyBraces}}
          echo ${{#surroundWithCurlyBraces 'steps.eniIds.outputs.NETWORK_ID' }}{{/surroundWithCurlyBraces}}
          echo ${{#surroundWithCurlyBraces 'steps.publicIpAddress.outputs.PUBLIC_IP_ADDRESS' }}{{/surroundWithCurlyBraces}}
  Upload_S3_Bucket:
    needs: Deploy_backend
    runs-on: ubuntu-latest
    steps:
      - name: Setup repo
        uses: actions/checkout@v2
      - name: Install the node
        uses: actions/setup-node@v1
        with:
          node-version: 12  
      - name: Installing angular/cli
        run: npm install -g @angular/cli
      - name: Installing the node modules
        working-directory: ./application/client/desktop/{{project_name}}
        run: |
          npm install
          npm i @ng-select/ng-select
      - name: Link the backend apigateway
        working-directory: ./application/client/desktop/{{project_name}}/src/environments
        run: |
          rm -rf environment.prod.ts
          echo 'export const environment = { DESKTOP_API: `http://${{#surroundWithCurlyBraces ' needs.Deploy_backend.outputs.public_ip '}}{{/surroundWithCurlyBraces}}:8000/desktop`, MOBILE_API: `http://<Your Domain Name or Live IP address>`, production: true };' >> environment.prod.ts
      - name: Production build
        working-directory: ./application/client/desktop/{{project_name}}
        run: ng build --configuration=production
      - uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          args: --acl public-read --delete
        env:
          AWS_S3_BUCKET: ${{#surroundWithCurlyBraces ' env.AWS_S3_BUCKET_NAME '}}{{/surroundWithCurlyBraces}}
          AWS_ACCESS_KEY_ID: ${{#surroundWithCurlyBraces ' env.AWS_ACCESS_KEY_ID '}}{{/surroundWithCurlyBraces}}
          AWS_SECRET_ACCESS_KEY: ${{#surroundWithCurlyBraces ' env.AWS_SECRET_ACCESS_KEY '}}{{/surroundWithCurlyBraces}}
          AWS_REGION: ${{#surroundWithCurlyBraces ' env.AWS_REGION '}}{{/surroundWithCurlyBraces}}
          SOURCE_DIR: "application/client/desktop/{{project_name}}/dist/{{project_name}}"
      - name: Enable the static webhosting
        run: |
          aws s3 website s3://${{#surroundWithCurlyBraces  'env.AWS_S3_BUCKET_NAME' }}{{/surroundWithCurlyBraces}}/ --index-document index.html --error-document error.html
          aws s3api put-bucket-policy --bucket ${{#surroundWithCurlyBraces  'env.AWS_S3_BUCKET_NAME' }}{{/surroundWithCurlyBraces}} --policy '{ "Version": "2012-10-17","Statement": [{ "Sid": "PublicReadGetObject", "Effect": "Allow", "Principal": "*", "Action": "s3:GetObject", "Resource": "arn:aws:s3:::${{#surroundWithCurlyBraces  'env.AWS_S3_BUCKET_NAME' }}{{/surroundWithCurlyBraces}}/*"}]}'
  Route53_geppetto_link:
    needs: Upload_S3_Bucket
    runs-on: ubuntu-latest
    steps:
      - name: "Create an A record set"
        uses: Roosterfish/aws-route53-record-set-action@master
        with: 
          aws_access_key_id: ${{#surroundWithCurlyBraces 'secrets.AWS_ACCESS_KEY_ID' }}{{/surroundWithCurlyBraces}}
          aws_secret_access_key: ${{#surroundWithCurlyBraces 'secrets.AWS_SECRET_ACCESS_KEY' }}{{/surroundWithCurlyBraces}}
          aws_route53_hosted_zone_id: ${{#surroundWithCurlyBraces 'secrets.AWS_ROUTE53_HOSTED_ZONE_ID' }}{{/surroundWithCurlyBraces}}
          aws_route53_rr_action: "CREATE"
          aws_route53_rr_name: "{{s3_bucket_name}}.geppetto.link"
          aws_route53_rr_type: "CNAME"
          aws_route53_rr_ttl: "300"
          aws_route53_rr_value: "{{s3_bucket_name}}.geppetto.link.s3-website-us-east-1.amazonaws.com."
  Mongodb_Script_Upload:
    needs: [ Route53_geppetto_link, Deploy_backend ]
    runs-on: ubuntu-latest
    steps: 
      - uses: actions/checkout@v2
        with: 
          path: './'
      - name: Take time to Mongodb_Script_Upload
        run: |
          sleep 10s
          mongo ${{#surroundWithCurlyBraces 'needs.Deploy_backend.outputs.public_ip' }}{{/surroundWithCurlyBraces}}:27017/{{project_name}}_{{project_unique_id}} -u admin -p password --authenticationDatabase admin < devops/local/docker/mongo.js