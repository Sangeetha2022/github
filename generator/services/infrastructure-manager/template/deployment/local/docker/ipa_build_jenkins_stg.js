/*
 * Template group ipa_build_jenkins
 * Compiled on Tue Aug 27 2019 12:50:44 GMT+0530 (IST)
 */
var path = require("path");
var base = path.dirname(module.filename);

function getInstance(st, group) {
    "use strict";
var r;
var gFile = "ipa_build_jenkins"; 

group.name = "ipa_build_jenkins";





//
// Template /ipa_build_jenkins
//
r = function(w, rc) {
    var g = this.owningGroup,
        s = this.scope;
    
    w.write("<?xml version='1.1' encoding='UTF-8'?>");
    w.write("\n");
    w.write("<project>");
    w.write("\n");
    w.pushIndentation("  ");
    w.write("<actions/>");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("<description>This job will build image for generated applications</description>");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("<keepDependencies>false</keepDependencies>");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("<properties/>");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("<scm class=\"hudson.scm.NullSCM\"/>");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("<canRoam>true</canRoam>");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("<disabled>false</disabled>");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("<blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("<blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("<triggers/>");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("<concurrentBuild>false</concurrentBuild>");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("<builders>");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("    ");
    w.write("<hudson.tasks.Shell>");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("      ");
    w.write("<command>#!/bin/bash");
    w.popIndentation();
    w.write("\n");
    w.write("\n");
    w.write("BASEPATH=&apos;/Users/administrator/.jenkins/workspace&apos;");
    w.write("\n");
    w.write("WORKSPACE=&apos;/ipa_build&apos;");
    w.write("\n");
    w.write("CODEPATH=&apos;/");
    st.write(w, s, g, rc, s.project_name);
    w.write("&apos;");
    w.write("\n");
    w.write("PROJECTNAME=&apos;");
    st.write(w, s, g, rc, s.project_name);
    w.write("&apos;");
    w.write("\n");
    w.write("CRTLOCATION=&apos;/Users/administrator/Documents/IonicTest/output/363e98b5-8a62-4070-9d18-b18dbb5cb7bf.mobileprovision&apos;");
    w.write("\n");
    w.write("\n");
    w.write("GITURL=&apos;https://github.com/gepinfo/");
    st.write(w, s, g, rc, s.project_name);
    w.write(".git&apos;");
    w.write("\n");
    w.write("\n");
    w.write("#installr");
    w.write("\n");
    w.write("APITOKEN='4G66wZx1EqiPc8FFZsBlWoR0vHeztFOj'");
    w.write("\n");
    w.write("EMAIL='mithunvikram10decoders@gmail.com'");
    w.write("\n");
    w.write("\n");
    w.write("get_code(){");
    w.write("\n");
    w.write("\n");
    w.write("cd \"$BASEPATH$WORKSPACE\"");
    w.write("\n");
    w.write("\n");
    w.write("if [ ! -d \"$PROJECTNAME\" ] ; then");
    w.write("\n");
    w.pushIndentation("    ");
    w.write("echo \"running git clone..\"");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("    ");
    w.write("git clone $GITURL");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("    ");
    w.write("if [ $? -eq 0 ]; then");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("        ");
    w.write("echo \"git clone sucessfull!\"");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("    ");
    w.write("else");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("        ");
    w.write("echo \"git clone failed!\"");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("    ");
    w.write("fi");
    w.popIndentation();
    w.write("\n");
    w.write("else");
    w.write("\n");
    w.pushIndentation("    ");
    w.write("echo \"code exists!\"");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("    ");
    w.write("cd $PROJECTNAME");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("    ");
    w.write("git pull");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("    ");
    w.write("if [ $? -eq 0 ]; then");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("        ");
    w.write("echo \"git pull sucessfull!\"");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("    ");
    w.write("else");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("        ");
    w.write("echo \"git pull failed!\"");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("    ");
    w.write("fi    ");
    w.popIndentation();
    w.write("\n");
    w.write("fi");
    w.write("\n");
    w.write("\n");
    w.write("}");
    w.write("\n");
    w.write("\n");
    w.write("build_code(){");
    w.write("\n");
    w.write("\n");
    w.write("cd \"$BASEPATH$WORKSPACE$CODEPATH\"");
    w.write("\n");
    w.write("\n");
    w.write("ionic cordova platform add ios");
    w.write("\n");
    w.write("if [ $? -eq 0 ]; then");
    w.write("\n");
    w.pushIndentation("    ");
    w.write("echo \"ios platform added sucessfully!\"");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("    ");
    w.write("npm i -D -E @ionic/app-scripts");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("    ");
    w.write("npm i");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("    ");
    w.write("ionic cordova build ios");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("    ");
    w.write("if [ $? -eq 0 ]; then");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("        ");
    w.write("echo \"ios build success!\"");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("    ");
    w.write("else");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("        ");
    w.write("echo \"ios build failed!\"");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("    ");
    w.write("fi");
    w.popIndentation();
    w.write("\n");
    w.write("else");
    w.write("\n");
    w.pushIndentation("    ");
    w.write("echo \"add ios platform failed!\"");
    w.popIndentation();
    w.write("\n");
    w.write("fi");
    w.write("\n");
    w.write("\n");
    w.write("\n");
    w.write("}");
    w.write("\n");
    w.write("\n");
    w.write("build_ipa(){");
    w.write("\n");
    w.write("cd platforms/ios/build/emulator/");
    w.write("\n");
    w.write("\n");
    w.write("mkdir ./Payload");
    w.write("\n");
    w.write("\n");
    w.write("cp -R \"$PROJECTNAME.app\" ./Payload");
    w.write("\n");
    w.write("\n");
    w.write("cp $CRTLOCATION Payload/$PROJECTNAME.app/embedded.mobileprovision");
    w.write("\n");
    w.write("\n");
    w.write("zip -qr \"$PROJECTNAME.ipa\" Payload/");
    w.write("\n");
    w.write("\n");
    w.write("rm -rf ./Payload");
    w.write("\n");
    w.write("}");
    w.write("\n");
    w.write("\n");
    w.write("upload_ipa(){");
    w.write("\n");
    w.write("\n");
    w.write("echo \"uploading app file to installr..\"");
    w.write("\n");
    w.write("\n");
    w.write("UPLOADRESPONSE=`curl -H \"X-InstallrAppToken: $APITOKEN\"  https://www.installrapp.com/apps.json -F \"qqfile=@$PROJECTNAME.ipa\" -F 'releaseNotes=These are the release notes for first app'`");
    w.write("\n");
    w.write("APPID=`echo $UPLOADRESPONSE | jq -r .appData.id`");
    w.write("\n");
    w.write("\n");
    w.write("echo \"app file uploaded appId : $APPID\"");
    w.write("\n");
    w.write("\n");
    w.write("echo \"sending email notification..\"");
    w.write("\n");
    w.write("\n");
    w.write("EMAILRESPONSE=`curl -H \"X-InstallrAppToken: $APITOKEN\" https://www.installrapp.com/apps/$APPID/builds/latest/team.json -F \"notify=$EMAIL\"`");
    w.write("\n");
    w.write("EMAILSTATUS=`echo $EMAILRESPONSE | jq -r .result`");
    w.write("\n");
    w.write("\n");
    w.write("echo \"email status:$EMAILSTATUS\"");
    w.write("\n");
    w.write("}");
    w.write("\n");
    w.write("\n");
    w.write("get_code");
    w.write("\n");
    w.write("build_code");
    w.write("\n");
    w.write("build_ipa");
    w.write("\n");
    w.write("upload_ipa");
    w.write("\n");
    w.write("</command>");
    w.write("\n");
    w.pushIndentation("    ");
    w.write("</hudson.tasks.Shell>");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("</builders>");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("<publishers/>");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("<buildWrappers/>");
    w.popIndentation();
    w.write("\n");
    w.write("</project>");
};
r.args = [
        { name: "project_name"     },
{ name: "base_path"     }
];
group.addTemplate("/ipa_build_jenkins", r); 


return group;
}
getInstance.base = base;

module.exports = getInstance;