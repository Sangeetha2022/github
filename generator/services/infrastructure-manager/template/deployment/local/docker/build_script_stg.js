/*
 * Template group build_script
 * Compiled on Sun Jul 21 2019 06:58:33 GMT+0530 (IST)
 */
var path = require("path");
var base = path.dirname(module.filename);

function getInstance(st, group) {
    "use strict";
var r;
var gFile = "build_script"; 

group.name = "build_script";





//
// Template /build_script
//
r = function(w, rc) {
    var g = this.owningGroup,
        s = this.scope;
    
    w.write("#!bin/bash");
    w.write("\n");
    w.write("\n");
    w.write("APIGATEWAYCODE='../../application/services/apigateway/'");
    w.write("\n");
    w.write("APIGATEWAYIMAGENAME='");
    st.write(w, s, g, rc, s.project_name);
    w.write("-apigateway:1.0'");
    w.write("\n");
    w.write("\n");
    w.write("CAMUNDACODE='../camunda/'");
    w.write("\n");
    w.write("CAMUNDAIMAGENAME='");
    st.write(w, s, g, rc, s.project_name);
    w.write("-camunda:1.0'");
    w.write("\n");
    w.write("\n");
    w.write("AUTHPROXYCODE='../authproxy/'");
    w.write("\n");
    w.write("AUTHPROXYIMAGENAME='");
    st.write(w, s, g, rc, s.project_name);
    w.write("-authproxy:1.0'");
    w.write("\n");
    w.write("\n");
    w.write("SECURITYCODE='../securitymanager/'");
    w.write("\n");
    w.write("SECURITYIMAGENAME='");
    st.write(w, s, g, rc, s.project_name);
    w.write("-security:1.0'");
    w.write("\n");
    w.write("\n");
    w.write("ADMINCODE='../adminmanager/'");
    w.write("\n");
    w.write("ADMINIMAGENAME='");
    st.write(w, s, g, rc, s.project_name);
    w.write("-admin:1.0'");
    w.write("\n");
    w.write("\n");
    w.write("DESKTOPCODE='../../client/desktop/");
    st.write(w, s, g, rc, s.project_name);
    w.write("/'");
    w.write("\n");
    w.write("DESKTOPIMAGENAME='");
    st.write(w, s, g, rc, s.project_name);
    w.write("-desktop:1.0'");
    w.write("\n");
    w.write("\n");
    w.write("HELMPATH='../../../../devops/'");
    w.write("\n");
    w.write("\n");
    w.write("echo \"Started to build docker images for pod....\"");
    w.write("\n");
    w.write("\n");
    w.write("build_apigateway_image () {");
    w.write("\n");
    w.write("\n");
    w.write("cd $APIGATEWAYCODE");
    w.write("\n");
    w.write("docker build -t $APIGATEWAYIMAGENAME .");
    w.write("\n");
    w.write("if [ $? -eq 0 ]; then");
    w.write("\n");
    w.pushIndentation("    ");
    w.write("echo \"Image $APIGATEWAYIMAGENAME build successfully, Now loading into KIND its take a while...\"");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("    ");
    w.write("kind load docker-image $APIGATEWAYIMAGENAME");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("    ");
    w.write("echo \"$APIGATEWAYIMAGENAME is successfully loaded into kind\"");
    w.popIndentation();
    w.write("\n");
    w.write("else");
    w.write("\n");
    w.pushIndentation("    ");
    w.write("echo \"Image $APIGATEWAYIMAGENAME build failed\"");
    w.popIndentation();
    w.write("\n");
    w.write("fi");
    w.write("\n");
    w.write("\n");
    w.write("}");
    w.write("\n");
    w.write("\n");
    w.write("build_camunda_image () {");
    w.write("\n");
    w.write("\n");
    w.write("cd $CAMUNDACODE");
    w.write("\n");
    w.write("docker build -t $CAMUNDAIMAGENAME .");
    w.write("\n");
    w.write("if [ $? -eq 0 ]; then");
    w.write("\n");
    w.pushIndentation("    ");
    w.write("echo \"Image $CAMUNDAIMAGENAME build successfully, Now loading into KIND its take a while...\"");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("    ");
    w.write("kind load docker-image $CAMUNDAIMAGENAME");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("    ");
    w.write("echo \"$CAMUNDAIMAGENAME is successfully loaded into kind\"");
    w.popIndentation();
    w.write("\n");
    w.write("else");
    w.write("\n");
    w.pushIndentation("    ");
    w.write("echo \"Image $CAMUNDAIMAGENAME build failed\"");
    w.popIndentation();
    w.write("\n");
    w.write("fi");
    w.write("\n");
    w.write("\n");
    w.write("}");
    w.write("\n");
    w.write("\n");
    w.write("build_authproxy_image () {");
    w.write("\n");
    w.write("\n");
    w.write("cd $AUTHPROXYCODE");
    w.write("\n");
    w.write("docker build -t $AUTHPROXYIMAGENAME .");
    w.write("\n");
    w.write("if [ $? -eq 0 ]; then");
    w.write("\n");
    w.pushIndentation("    ");
    w.write("echo \"Image $AUTHPROXYIMAGENAME build successfully, Now loading into KIND its take a while...\"");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("    ");
    w.write("kind load docker-image $AUTHPROXYIMAGENAME");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("    ");
    w.write("echo \"$AUTHPROXYIMAGENAME is successfully loaded into kind\"");
    w.popIndentation();
    w.write("\n");
    w.write("else");
    w.write("\n");
    w.pushIndentation("    ");
    w.write("echo \"Image $AUTHPROXYIMAGENAME build failed\"");
    w.popIndentation();
    w.write("\n");
    w.write("fi");
    w.write("\n");
    w.write("\n");
    w.write("}");
    w.write("\n");
    w.write("\n");
    w.write("build_security_image () {");
    w.write("\n");
    w.write("\n");
    w.write("cd $SECURITYCODE");
    w.write("\n");
    w.write("docker build -t $SECURITYIMAGENAME .");
    w.write("\n");
    w.write("if [ $? -eq 0 ]; then");
    w.write("\n");
    w.pushIndentation("    ");
    w.write("echo \"Image $SECURITYIMAGENAME build successfully, Now loading into KIND its take a while...\"");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("    ");
    w.write("kind load docker-image $SECURITYIMAGENAME");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("    ");
    w.write("echo \"$SECURITYIMAGENAME is successfully loaded into kind\"");
    w.popIndentation();
    w.write("\n");
    w.write("else");
    w.write("\n");
    w.pushIndentation("    ");
    w.write("echo \"Image $SECURITYIMAGENAME build failed\"");
    w.popIndentation();
    w.write("\n");
    w.write("fi");
    w.write("\n");
    w.write("\n");
    w.write("}");
    w.write("\n");
    w.write("\n");
    w.write("build_admin_image () {");
    w.write("\n");
    w.write("\n");
    w.write("cd $ADMINCODE");
    w.write("\n");
    w.write("docker build -t $ADMINIMAGENAME .");
    w.write("\n");
    w.write("if [ $? -eq 0 ]; then");
    w.write("\n");
    w.pushIndentation("    ");
    w.write("echo \"Image $ADMINIMAGENAME build successfully, now loading into KIND its take a while...\"");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("    ");
    w.write("kind load docker-image $ADMINIMAGENAME");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("    ");
    w.write("echo \"$ADMINIMAGENAME is successfully loaded into kind\"");
    w.popIndentation();
    w.write("\n");
    w.write("else");
    w.write("\n");
    w.pushIndentation("    ");
    w.write("echo \"Image $ADMINIMAGENAME build failed\"");
    w.popIndentation();
    w.write("\n");
    w.write("fi");
    w.write("\n");
    w.write("\n");
    w.write("}");
    w.write("\n");
    w.write("\n");
    w.write("build_appbuilder_image () {");
    w.write("\n");
    w.write("\n");
    w.write("cd $DESKTOPCODE");
    w.write("\n");
    w.write("npm install");
    w.write("\n");
    w.write("npm rebuild node-sass");
    w.write("\n");
    w.write("npm uninstall @angular-devkit/build-angular");
    w.write("\n");
    w.write("npm install @angular-devkit/build-angular");
    w.write("\n");
    w.write("ng build");
    w.write("\n");
    w.write("docker build -t $DESKTOPIMAGENAME .");
    w.write("\n");
    w.write("if [ $? -eq 0 ]; then");
    w.write("\n");
    w.pushIndentation("    ");
    w.write("echo \"Image $DESKTOPIMAGENAME build successfully,Now loading into KIND its take a while...\"");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("    ");
    w.write("kind load docker-image $DESKTOPIMAGENAME");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("    ");
    w.write("echo \"$DESKTOPIMAGENAME is successfully loaded into kind\"");
    w.popIndentation();
    w.write("\n");
    w.write("else");
    w.write("\n");
    w.pushIndentation("    ");
    w.write("echo \"Image $DESKTOPIMAGENAME build failed\"");
    w.popIndentation();
    w.write("\n");
    w.write("fi");
    w.write("\n");
    w.write("\n");
    w.write("}");
    w.write("\n");
    w.write("\n");
    w.write("helm_install () {");
    w.write("\n");
    w.write("\n");
    w.write("cd $HELMPATH");
    w.write("\n");
    w.write("helm install --dry-run --debug ./helm");
    w.write("\n");
    w.write("helm install --name helm ./helm");
    w.write("\n");
    w.write("if [ $? -eq 0 ]; then");
    w.write("\n");
    w.pushIndentation("    ");
    w.write("echo \"App Deployment is Done,do port-forward to access your app in browser\"");
    w.popIndentation();
    w.write("\n");
    w.write("else");
    w.write("\n");
    w.pushIndentation("    ");
    w.write("echo \"App deployment is Failed, there is a problem with helm charts\"");
    w.popIndentation();
    w.write("\n");
    w.write("fi");
    w.write("\n");
    w.write("\n");
    w.write("}");
    w.write("\n");
    w.write("\n");
    w.write("build_apigateway_image");
    w.write("\n");
    w.write("build_camunda_image");
    w.write("\n");
    w.write("build_authproxy_image");
    w.write("\n");
    w.write("build_security_image");
    w.write("\n");
    w.write("build_admin_image");
    w.write("\n");
    w.write("build_appbuilder_image");
    w.write("\n");
    w.write("helm_install");
    w.write("\n");
};
r.args = [
        { name: "project_name"     },
{ name: "base_path"     }
];
group.addTemplate("/build_script", r); 


return group;
}
getInstance.base = base;

module.exports = getInstance;