import { Request } from 'express';
import * as simplegit from 'simple-git/promise';
import * as request from "request-promise-native";

let git = null;
let commitTo = 'GitHub'

export class SourceControlService {

    checkIfRepoExist = (req: Request, sourceControlDto, callback: CallableFunction) => {
        git = simplegit('/Users/10decoders/Desktop/test/')
        git.checkIsRepo().then((status) => {
            if (!status && commitTo.toLocaleLowerCase() === 'github') {
                this.createRepoInGitHub(callback)
            } else if (!status && commitTo.toLocaleLowerCase() === 'bitbucket') {
                this.createRepoInBitBucket(callback)
            } else {
                this.updateGitRepo(callback)
            }
        })
    }

    private createRepoInGitHub = async (callback) => {
        let gitBody = {
            "name": "Hello-World-3",
            "description": "Generated by Geppetto",
            "homepage": "",
            "private": false,
            "has_issues": true,
            "has_projects": true,
            "has_wiki": true
        }

        let USER = 'tibrahul'
        let PASS = 'Rahul6243'
        let remote = `https://${USER}:${PASS}@api.github.com/user/repos`

        await request({
            uri: remote,
            method: "POST",
            json: gitBody,
            headers: {
                'User-Agent': "https://api.github.com/meta",
                'Content-Type': 'application/json'
            }
        }).then((resp) => {
            this.initializeGitAndPushToSource(resp.html_url, callback)
        }).catch((err) => {
            callback(err.error.message)
        })

    }

    private createRepoInBitBucket = async (callback) => {
        let gitBody = {
            "name": "Hello_World_8",
            "description": "Generated by Geppetto",
            "scm": "git",
            "is_private": false,
        }

        let USER = 'tibrahul'
        let PASS = 'Rahul6243'
        let remote = `https://${USER}:${PASS}@api.bitbucket.org/2.0/repositories/${USER}/${gitBody.name.toLocaleLowerCase()}`
        console.log(" =  > ", remote)
        await request({
            uri: remote,
            method: "POST",
            json: gitBody,
            headers: {
                'Content-Type': 'application/json'
            }
        }).then((resp) => {
            let bitBucketUrl = `https://${USER}:${PASS}@bitbucket.org/${USER}/${gitBody.name.toLocaleLowerCase()}`
            this.initializeGitAndPushToSource(bitBucketUrl, callback)
        }).catch((err) => {
            console.log(" =     >   >    >err>    >>>    >>>>  ", err)
            callback(err.error.message)
        })

    }

    private initializeGitAndPushToSource = (gitRemote, callback) => {
        git.init().then(() => {
            return git.add('.')
        }).then(() => {
            return git.addConfig('user.name', 'Rahul Tibrewal')
        }).then(() => {
            return git.addConfig('user.email', 'rahul.tiberwal@10decoders.in')
        }).then(() => {
            return git.commit("code commited from geppetto!")
        }).then(() => {
            return git.addRemote('origin', gitRemote)
        }).then(() => {
            return git.push('origin', 'master');
        }).then(() => {
            return git.checkoutLocalBranch('geppetto');
        }).then(() => {
            return git.add('.')
        }).then(() => {
            return git.push(['-u', 'origin', 'geppetto']);
        }).then((status) => {
            callback("Git Init And Pushed to New Repo.")
        })

    }

    private updateGitRepo = (callback) => {
        git.add('.').then(() => {
            return git.addConfig('user.name', 'Rahul Tibrewal')
        }).then(() => {
            return git.addConfig('user.email', 'rahul.tiberwal@10decoders.in')
        }).then(() => {
            return git.commit("updated Github code")
        }).then(() => {
            return git.push('origin', 'master');
        }).then((status) => {
            callback("Git code updated with new changes.")
        })
    }

}